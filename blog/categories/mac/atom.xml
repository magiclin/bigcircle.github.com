<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mac | Hi, I’m dayuan]]></title>
  <link href="http://Bigcircle.github.com/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://Bigcircle.github.com/"/>
  <updated>2012-09-15T17:14:52+08:00</updated>
  <id>http://Bigcircle.github.com/</id>
  <author>
    <name><![CDATA[bigcircle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[新装备之 Flico & Trackpad]]></title>
    <link href="http://Bigcircle.github.com/blog/intro-flico-and-touchpad.html/"/>
    <updated>2012-09-15T16:16:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/intro-flico-and-touchpad</id>
    <content type="html"><![CDATA[<p>前段时间入手 Mac 的同时顺便买了套罗技的无线键鼠，的确很小巧便宜，但是手感却惨不忍睹，打字变成了负担而不是享受，同时由于已经非常习惯 Mac 触控板那如四瓣顺滑的手感，但是用自带的触控板一天下来胳膊会很疼，很是伤手腕。接着加上同事的怂恿，遂决定入手机械键盘和触控板以解放双手。其实之前就已经有目标了，所以购买过程非常快，也只是在买和不买之间犹豫了两天，对于目前很穷的我来说是笔大开销。。</p>

<p>键盘肯定 HHKB 和 realforce 是当之无愧的王者，那个价钱也让看到的人望而却步；低端的国产键盘胜在便宜，性价比高，缺点是做工较差，手感比正规的 chery 和 flico 还是要差很多的，加上比较钟爱小巧型的键盘，右侧数字键对我来说基本上没有出场机会，所以最终决定买个折衷的 flico 圣手2代 87无冲茶轴。之所以不买青轴，大家也知道它是办公室杀手，会导致在同事那声望冷淡甚至仇恨，加上可能还有点游戏的需求，茶轴这种兼顾性的设计还是比较适合我的</p>

<p>两件套购买过程没用到10分钟，淘宝上也就那么几家，选了家 tmall 信誉高点且最近成交量比较大的卖家无交流直接拍下，卖家也在拍下后不到一个小时就发货了，速度还是很迅速的。触控板看了下价格都差不多，于是直接去 apple 官网买了个了事。剩下的就是短暂的等待了，基本上第二天下午就都从上海发到了北京，顺风的速度一向令人满意</p>

<p>从表面上它是无刻板</p>

<p><img src="http://m1.img.libdd.com/farm5/2012/0915/16/56C4E8FC9F566DE1631ADCF2B50B8357999FCE663682_1280_960.jpg" alt="" /></p>

<p>其实刻度在侧面，这样键帽正面就不用刻了，给你一个干净的键帽</p>

<p><img src="http://m2.img.libdd.com/farm4/2012/0915/16/FAD97012362B8EA0B3014C03A0E9EBA2BC2BEE663682_1280_960.jpg" alt="" /></p>

<p>很大的触控板，目测体积应该有自带触控板的两倍，手指可以很舒服的展开</p>

<p><img src="http://m1.img.libdd.com/farm5/2012/0915/16/593AABC45A0F925D64363AD05924F475B89E17663682_1280_960.jpg" alt="" /></p>

<p>一张大合影，键盘是放在电脑上的，桌子小没办法，舒展不开</p>

<p><img src="http://m2.img.libdd.com/farm4/2012/0915/16/00C081036C3194F366C0B1CB0E6860DA1CA063663682_1280_960.jpg" alt="" /></p>

<p>手感超垃圾的罗技无线，一分钱一分货啊</p>

<p><img src="http://m3.img.libdd.com/farm4/2012/0915/16/878B9586D08317B84FF9825D7837AA78F8B20B663682_1280_960.jpg" alt="" /></p>

<p>夜用朦胧版</p>

<p><img src="http://m1.img.libdd.com/farm5/2012/0915/16/87406260537C70E3B3D74F3B2818E9674A2375663682_1280_960.jpg" alt="" /></p>

<p>貌似这个分辨率看起来有点淡淡的模糊感，木办法，渣摄影技术，不及陈老师万分之一，有待提高</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iterm2 快捷键介绍]]></title>
    <link href="http://Bigcircle.github.com/blog/iterm2-keymaps.html/"/>
    <updated>2012-09-08T15:30:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/iterm2-keymaps</id>
    <content type="html"><![CDATA[<p>Mac 原来自带的终端工具 Terminal 不好用是出了名的，虽然最近几个版本苹果稍微做了些优化，功能上，可用性方面增强不少，无奈有个更好用的 Iterm2 摆在那，基本上也就没有多少出场机会了</p>

<p><a href="http://www.iterm2.com/">Iterm2</a>，经常使用终端的同学肯定早就切换到这个东东上了，开源免费，和 zsh 搭配差不多已经取代 Terminal + bash 成了 Mac 上终端工具的标准配置。
<!--more-->
Iterm2 的优点：</p>

<ul>
  <li>兼容性好，远程服务器 vi 什么的低版本能很好兼容，Terminal 则会出问题</li>
  <li>支持 xterm-256 色，方便在终端中配置 vim/emacs 代码配色</li>
  <li>快捷键丰富，自带/自己定义都很方便</li>
  <li>分屏简单方便，可以根据自己需要同时搭配上 tmux，大屏用起来爽到爆</li>
</ul>

<p><a href="http://www.iterm2.com/#/section/documentation">官方文档</a> 有非常详细的介绍，先来看看自带有哪些很实用的功能/快捷键</p>

<ol>
  <li>⌘ + 数字在各 tab 标签直接来回切换</li>
  <li>选择即复制 + 鼠标中键粘贴，这个很实用</li>
  <li>⌘ + f 所查找的内容会被自动复制</li>
  <li>⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏</li>
  <li>⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏</li>
  <li>ctrl + u 清空当前行，无论光标在什么位置</li>
  <li>输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令</li>
  <li>⌘ + shift + h 会列出剪切板历史</li>
  <li>可以在 <code>Preferences &gt; keys</code> 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现 </li>
</ol>

<p>我常用的一些快捷键</p>

<ol>
  <li>⌘ + 1 / 2 左右 tab 之间来回切换，这个在 <a href="http://dayuan.im/blog/add-rvm-ruby-path-to-sublime-text-2.html/">前面</a> 已经介绍过了 </li>
  <li>⌘← / ⌘→ 到一行命令最左边/最右边 ，这个功能同 C+a / C+e</li>
  <li>⌥← / ⌥→ 按单词前移/后移，相当与 C+f / C+b，其实这个功能在Iterm中已经预定义好了，⌥f / ⌥b，看个人习惯了</li>
  <li>好像就这几个。。囧</li>
</ol>

<p>设置方法如下</p>

<p><img src="http://m1.img.libdd.com/farm5/2012/0908/17/523CEF031371E3BC2A56926F002FA3E2E651F805049E_924_541.PNG" alt="" /></p>

<p>当然除了这些可以自定义的也不能忘了 linux 下那些好用的组合</p>

<ol>
  <li>C+a / C+e 这个几乎在哪都可以使用</li>
  <li>C+p / !! 上一条命令</li>
  <li>C+k 从光标处删至命令行尾 (本来 C+u 是删至命令行首，但iterm中是删掉整行)</li>
  <li>C+w A+d 从光标处删至字首/尾</li>
  <li>C+h C+d 删掉光标前后的自负</li>
  <li>C+y 粘贴至光标后</li>
  <li>C+r 搜索命令历史，这个较常用</li>
</ol>

<p>剩下一些不常用的就不介绍了，目前这几个差不多已经够用了，等什么时候去官方文档上看看发现更好的再来补充几个</p>

<p>关于备份，配置文件位于</p>

<p><code>
~/Library/Preferences/com.googlecode.iterm2.plist
</code></p>

<p>可以把这个文件备份下来，等下次换环境了直接导入也免得重新配置</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2 使用 RVM ]]></title>
    <link href="http://Bigcircle.github.com/blog/add-rvm-ruby-path-to-sublime-text-2.html/"/>
    <updated>2012-09-01T13:43:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/add-rvm-ruby-path-to-sublime-text-2</id>
    <content type="html"><![CDATA[<p>用 Sublime Text 2 的同学使用 rvm 时会发现内置的可执行 ruby build 不可用了或者还是默认执行系统自带的 ruby-1.8.7 版本，当执行的脚本中用到 1.9.2 新语法的时候可能会被错，这个时候就需要切换到 rvm 版本控制的 ruby
<!--more-->
默认自带的 build 目录位于</p>

<p><code>c
~/Library/Application\ Support/Sublime\ Text\ 2/Packages/Ruby/Ruby.sublime-build
</code></p>

<p>默认的配置是这样的</p>

<p><code>
"cmd": ["ruby", "$file"],
"file_regex": "^(...*?):([0-9]*):?([0-9]*)",
"selector": "source.ruby"
</code></p>

<p>切换到 rvm 只需要改 cmd - ruby 指向路径， -KU 增加对中文输出支持，当然文件类型也要求是 utf-8</p>

<p><code>
"cmd": ["/Users/yourname/.rvm/bin/rvm-auto-ruby", "-KU", "$file"]
</code></p>

<p>你也可以自己改成 rvm 默认的 default ruby</p>

<p>```c
which ruby</p>

<p>=&gt; /Users/yourname/.rvm/rubies/ruby-1.9.3-p194/bin/ruby
```</p>

<p>默认执行快捷键是 <code>⌘ + b</code> / <code>F7</code>，可以自己定义成喜欢的按键</p>

<p><code>
{ "keys": ["super+b"], "command": "build" },
</code></p>

<p>如何构建不用语言的 build，参考 <a href="http://addyosmani.com/blog/custom-sublime-text-build-systems-for-popular-tools-and-languages/">这篇</a>，差不多列举全了，构造方式也很简单</p>

<hr />

<p>另外推荐个我最常用的快捷键</p>

<ul>
  <li>在打开的几个标签之间前后切换。当打开很多标签时，又不喜欢用鼠标点来点去的可以试下这个</li>
</ul>

<p><code>
{ "keys": ["super+1"], "command": "prev_view" },
{ "keys": ["super+2"], "command": "next_view" },
</code></p>

<p>这个快捷键同样适用于设置 Chrome/TotalFinder/iTerm 等能打开多标签的app，设置方式如下</p>

<p><img src="http://m2.img.libdd.com/farm4/2012/0901/15/57756B60A70B4B4D6BEE07D177C25C55C856F5189977_500_448.jpg" alt="" /></p>

<p>其他我定义的快捷键都在 <a href="https://github.com/Bigcircle/config/blob/master/sublime/User/Default%20(OSX).sublime-keymap">这</a>，有需要的可以去淘几个</p>

<p>工欲善其事，必先利其器，利用好工具可以给开发带来很大的便利，节省很多时间</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译Textmate]]></title>
    <link href="http://Bigcircle.github.com/blog/compile-textmate.html/"/>
    <updated>2012-08-28T23:43:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/compile-textmate</id>
    <content type="html"><![CDATA[<p>前段时间 <a href="http://macromates.com/">Textmate</a> 开源着实让大家大吃一斤，论坛上，Twitter，包括微博上也都是各种转发，谈论。   </p>

<p>Textmate 无须多作介绍，知道的应该都知道。号称能够和 Emacs Vim 并称的神器，当然是在 Mac 上和 Ruby 界，很多编译库都是系统依赖的，作者可能也没想移植到 linux/windows 下，所以没造成大火的局面，不过美金也赚的差不多了</p>

<!--more-->

<p>我从做开发伊始就一直用的 Sublime Text 2，也是一个大量借鉴 Textmate 理念和功能的产品，易用性相当不错，也有很多现成的包可以用，跨平台，不爽的是快捷键不能跨，windows下快捷键得另改，好在现在已经不需要切到 windows 了，也就少了这个烦恼。上次在 v2ex 看到有人发编译后的app，感觉编译应该不是很难。以前一直想试用下，但是version 1下的汉字显示实在是不行，现在升级到版本2了貌似解决了这个问题，就尝试着编译个尝尝鲜，看和 ST2 哪个更好用</p>

<p>Github 上托管地址 <a href="https://github.com/textmate/textmate">Here</a></p>

<h5 id="section">安装编译所需工具</h5>

<p><code>c
brew install ragel boost multimarkdown hg ninja
</code></p>

<p>boost 源码放在 sourceforge 上，下载可能需要挂代理，而且速度也很慢 <br />
ninja 最近才新加到 brew 的 Formula 里面，如果安装提示没有的话需要 brew update 下</p>

<h5 id="pgrep-pkill">查看是否有 pgrep pkill</h5>

<p><code>
which pgrep pkill
# 如果没有的话需要安装 proctools
brew install proctools
</code></p>

<h5 id="clang-32--40-">需要clang 3.2 / 4.0 版本</h5>

<p>一般安装了 xcode 都已经安装好了 clang，直接查看版本</p>

<p>```
clang -v</p>

<p>Apple clang version 4.0 (tags/Apple/clang-421.0.60) (based on LLVM 3.1svn)
Target: x86_64-apple-darwin12.1.0
Thread model: posix
```</p>

<p><code>
# 没有的话安装 llvm 套件
brew install --HEAD llvm --with-clang
</code></p>

<h5 id="start-compile">start compile</h5>

<p><code>
git clone https://github.com/textmate/textmate.git
cd textmate
git submodule update --init
./configure &amp;&amp; ninja
</code></p>

<p>作者用 ninja 取代了 make 进行编译和安装</p>

<p>编译完了图标居然变成了菊花。。以前的图标差不多成为了一个标志，实在是理解不能。。</p>

<p>生成的 app 文件位于</p>

<p><code>
~/build/TextMate/Applications/TextMate
</code></p>

<p>图标就是那朵粉嫩的菊花。。难看死了</p>

<p>最后贴上一张芙蓉照</p>

<p><img src="http://m1.img.libdd.com/farm5/2012/0829/00/00A980D9C6A159F9467E71EFCE4485420E266C05049E_1190_714.PNG" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac设置goagent开机自启动]]></title>
    <link href="http://Bigcircle.github.com/blog/start-goagent-automatically-when-boot-in-mac.html/"/>
    <updated>2012-08-25T12:19:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/start-goagent-automatically-when-boot-in-mac</id>
    <content type="html"><![CDATA[<p>每次开机都得手动开启goagent，首先打开iTerm再输入，虽然平时很多时间都在跟终端打交道，也定义了快捷键go简单输入，但还是觉得麻烦，占了一个标签页不说，还时不时掉线，这个就无法忍了
搜索了下自动开启的方法，都是一些 linux 下的方法，比如说这两篇关键字靠前的</p>

<!--more-->

<ul>
  <li><a href="http://keating.iteye.com/blog/1463521">开机自动启动GoAgent</a></li>
  <li><a href="http://adelzhang.blogspot.com/2011/10/ubuntugoagent.html">ubuntu下goagent开机自启动</a></li>
</ul>

<p>用linux的同学可以参考下，对症下药，应该问题不大，不过这些方法在Mac下用不了，启动文件存放位置方法和linux还是有所不同的，那么有没有在Mac下自启动的简单方法呢，答案当然是有的，过程也不复杂
用过 <a href="http://mxcl.github.com/homebrew/">Homebrew</a> (Mac下的一个包管理器) 的同学都会觉得这个工具很方便，相当于linux上的apt-get和yum，方便大家下载安装各种需要很多依赖的东西，可能有时候依赖包还不是很完善，但是差不多已经取代Macports成为Mac上最好用的包管理器了，没有用的建议装一个(和port只能2选1)</p>

<p>如果你安装过mysql/mongo这类可以有开机启动项的软件，在安装完之后会有一大堆提示，比如这样</p>

<p>```c
To launch on startup:
* if this is your first install:
mkdir -p ~/Library/LaunchAgents
cp /usr/local/Cellar/mysql/5.5.25a/homebrew.mxcl.mysql.plist ~/Library/LaunchAgents/
launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</p>

<ul>
  <li>if this is an upgrade and you already have the homebrew.mxcl.mysql.plist loaded:
launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
cp /usr/local/Cellar/mysql/5.5.25a/homebrew.mxcl.mysql.plist ~/Library/LaunchAgents/
launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</li>
</ul>

<p>You may also need to edit the plist to use the correct “UserName”.
```</p>

<p>这个就是提示你怎么设置开机启动，brew已经预先把启动文件都写好了，你只需要copy过去，设置启动就Ok了。~/Library/LaunchAgents 下存放用户登陆之后的启动服务，具体补课可以参考 <a href="http://kenwublog.com/mac-os-launchd-tuning">这篇</a>
有人做了个dmg包和goagent源码配合使用，把那个app设置为开机启动也很方便，位于 <code>系统偏好设置 &gt; 用户与群组 &gt; 登陆项</code> 参考 <a href="http://dharmasong.net/2011/11/449.html">这</a>，这个应该是不爱折腾的最简单的方法</p>

<p>下面开始小折腾的方法，也很简单</p>

<ul>
  <li>新建一个plist文件，比如说叫 com.google.goagent.plist，输入以下内容</li>
</ul>

<p><div><script src='https://gist.github.com/3461688.js?file=com.google.goagent.plist'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
  &lt;key&gt;Label&lt;/key&gt;
  &lt;string&gt;com.google.goagent&lt;/string&gt;
  &lt;key&gt;ProgramArguments&lt;/key&gt;
  &lt;array&gt;
    &lt;string&gt;/usr/local/python&lt;/string&gt;
    &lt;string&gt;/Users/yourname/goagent/local/proxy.py&lt;/string&gt;
  &lt;/array&gt;
  &lt;key&gt;RunAtLoad&lt;/key&gt;
  &lt;true/&gt;
  &lt;key&gt;KeepAlive&lt;/key&gt;
  &lt;true/&gt;
  &lt;UserName&gt;dayuan&lt;/UserName&gt;
  &lt;key&gt;WorkingDirectory&lt;/key&gt;
  &lt;string&gt;/Users/yourname/goagent/local&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre></noscript></div>
</p>

<p>代码很简单，书写要规范。设置RunAtLoad和KeepAlive为true，试用了一天感觉良好</p>

<ul>
  <li>接下来敲几个字就over了</li>
</ul>

<p><code>c
	cp com.google.goagent.plist ~/Library/LaunchAgents
	launchctl load -w ~/Library/LaunchAgents/com.google.goagent.plist
</code></p>

<p>这样下次开机的时候goagent就已经自动启动了，总结起来就是三步:
写一个启动文件 —— copy到对应目录 —— 设为启动</p>

<p>默认开启8087端口</p>

<p><code>c
lsof -i:8087
Python xxxxxx TCP localhost:8087 (LISTEN)
</code>
用Chrome或者Firefox用proxy switch已经配置好的同学可以直接打开敏感词测试了</p>

<p>停止该服务的方式也很简单，把这个 plist 移除当前目录 或者</p>

<p><code>
# -w 参数是完全删除的意思，否则在下次登陆的时候依然会启动服务
launchctl unload -w ~/Library/LaunchAgents/com.google.goagent.plist
</code></p>

<p>执行这2个操作中的一个后服务将会立即停止，需要注意的是，不能通过 kill PID 的方式杀死该服务，kill -9 删除服务也会重启，只能通过这两种方式才能终止，如果想修改服务最好先 unload 服务，修改完之后再 load，直接修改可能会导致电脑重启</p>

]]></content>
  </entry>
  
</feed>
