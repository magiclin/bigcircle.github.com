<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Hi, I’m dayuan]]></title>
  <link href="http://Bigcircle.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://Bigcircle.github.com/"/>
  <updated>2012-08-30T14:50:08+08:00</updated>
  <id>http://Bigcircle.github.com/</id>
  <author>
    <name><![CDATA[bigcircle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[你可能错过的 Rails 技巧(一)]]></title>
    <link href="http://Bigcircle.github.com/blog/10-things-you-didnt-know-rails-could-do-1.html/"/>
    <updated>2012-08-30T11:22:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/10-things-you-didnt-know-rails-could-do-1</id>
    <content type="html"><![CDATA[<p>记得前段时间 RailsConf2012 之后看过一个不错的pdf，<a href="https://speakerdeck.com/u/jeg2/p/10-things-you-didnt-know-rails-could-do">10 things you didn’t know rails could do</a></p>

<p>说是10个，但是给出了42个实例，这几天抽空又回味了下，料很多，写的很好，顺便总结学习下</p>

<p>Pass 掉第一个 <a href="http://fridayhug.com">fridayhug</a>，我们是开心拥抱每一天
<!--more--></p>

<h6 id="rails-app">1 - 最小的rails app</h6>

<p>```ruby
%w(action_controller/railtie coderay markaby).map &amp;method(:require)</p>

<p>run TheSmallestRailsApp ||= Class.new(Rails::Application) {
  config.secret_token = routes.append {
    root to: proc {
      [200, {“Content-Type” =&gt; “text/html”}, [Markaby::Builder.new.html {
        title @title = “The Smallest Rails App”
        h3 “I am #@title!”
        p “Here is my source code:”
        div { CodeRay.scan_file(<strong>FILE</strong>).div(line_numbers: :table) }
        p { a “Make me smaller”, href: “//goo.gl/YdRpy” }
      }]]
    }
  }.to_s
  initialize!
}
```</p>

<h6 id="todo">2 - 提醒功能 TODO</h6>

<p>```
class UsersController &lt; ApplicationController
  # TODO:  Make it possible to create new users.
end</p>

<p>class User &lt; ActiveRecord::Base
  # FIXME: Should token really  be accessible?
  attr_accessible :bil, :email, :name, :token
end</p>

<p>&lt;%# OPTIMIZE: Paginate this listing. %&gt;
&lt;%= render Article.all %&gt;
```</p>

<p>执行 <code>rake notes</code></p>

<p>```
app/controllers/users_controller.rb:
  * [ 2] [TODO] Make it possible to create new users.</p>

<p>app/models/user.rb:
  * [ 2] [FIXME] Should token really be accessible?</p>

<p>app/views/articles/index.html.erb:
  * [ 1] [OPTIMIZE] Paginate this listing.
```</p>

<p>查看单独的 TODO / FIXME / OPTIMIZE </p>

<p>```
rake notes:todo</p>

<p>app/controllers/users_controller.rb:
  * [ 2] Make it possible to create new users.
```</p>

<p>可以自定义提醒名称</p>

<p><code>
class Article &lt; ActiveRecord::Base
  belongs_to :user
  attr_accessible :body, :subject
  # JEG2: Add that code from your blog here.
end
</code>
不过需要敲一长串，可以alias个快捷键</p>

<p>```
rake notes:custom ANNOTATION=JEG2</p>

<p>app/models/article.rb:
  * [ 4]Add that code from your blog here.
```</p>

<h6 id="rails-c">3 - 沙箱模式执行 rails c</h6>

<p><code>
rails c --sandbox
</code></p>

<p>沙箱模式会有回滚事务机制，对数据库的操作在退出之前都会自动回滚到之前未修改的数据</p>

<h6 id="rails-c--rails-helper-">4 - 在 rails c 控制台中使用 rails helper 方法</h6>

<p><code>
$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; helper.number_to_currency(100)
=&gt; "$100.00"
&gt;&gt; helper.time_ago_in_words(3.days.ago)
=&gt; "3 days"
</code></p>

<h6 id="thin--webrick">5 - 开发模式用 thin 代替 webrick</h6>

<p>```
group :development do
  gem ‘thin’
end</p>

<p>rails s thin / thin start
```</p>

<h6 id="section">6 - 允许自定义配置</h6>

<p>```
 - lib/custom/railtie.rb</p>

<p>module Custom
   class Railtie &lt; Rails::Railtie
     config.custom = ActiveSupport::OrderedOptions.new
   end
 end</p>

<ul>
  <li>config/application.rb</li>
</ul>

<p>require_relative “../lib/custom/railtie”</p>

<p>module Blog
   class Application &lt; Rails::Application
     # …
     config.custom.setting = 42
   end
 end
```</p>

<h6 id="keep-funny">7 - keep funny</h6>

<p>作者给出了个介绍 ruby 以及一些相关 blog的网站 <a href="http://www.rubydramas.com">rubydramas</a>，搞笑的是这个网站右上角标明 </p>

<p><code>
Powered by PHP
</code></p>

<p>用 <a href="http://isitrails.com">isitrails.com</a> 检查了下，果然不是用 rails 做的，这个应该是作者分享 ppt 过程中的一个小插曲吧</p>

<h6 id="section-1">8 -理解简写的迁移文件</h6>

<p><code>
rails g resources user name:string email:string token:string bio:text
</code></p>

<p>字段会被默认为 string 属性，查看了下 <a href="https://github.com/rails/rails/blob/master/railties/lib/rails/generators/generated_attribute.rb#LC55">源码</a>，果然有初始化定义</p>

<p><code>
rails g resources user name email token:string{6} bio:text
</code></p>

<p>会生成用样的 migration 文件</p>

<p><code>
class CreateUsers &lt; ActiveRecord::Migration
  def change
    create_table :users do |t|
      t.string :name
      t.string :email
      t.string :token, :limit =&gt; 6
      t.text :bio
      t.timestamps
    end
  end
end
</code></p>

<h6 id="migration-">9 - 给 migration 添加索引</h6>

<p><code>
rails g resource user name:index email:uniq token:string{6} bio:text
</code></p>

<p>会生成 name 和 email 的索引，同时限定 email 唯一</p>

<p>```
class CreateUsers &lt; ActiveRecord::Migration
  def change
    create_table :users do |t|
      t.string :name
      t.string :email
      t.string :token, :limit =&gt; 6
      t.text :bio
      t.timestamps
    end</p>

<pre><code>add_index :users, :name
add_index :users, :email, :unique =&gt; true   end end ```
</code></pre>

<h6 id="section-2">10 - 添加关联关系</h6>

<p><code>
rails g resource article user:references subject body:text
</code></p>

<p>会自动关联生成对应的 belongs_to 和 外键，并添加索引</p>

<p><code>
class CreateArticles &lt; ActiveRecord::Migration
  def change
    create_table :articles do |t|
      t.references :user
      t.string :subject
      t.text :body
      t.timestamps
    end
    add_index :articles, :user_id
  end
end
</code></p>

<p><code>
class Article &lt; ActiveRecord::Base
  belongs_to :user
  attr_accessible :body, :subject
end
</code></p>

<p>未完待续。。。太长了，还是分期吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails view select 方法学习]]></title>
    <link href="http://Bigcircle.github.com/blog/explain-select-on-rails-hepler.html/"/>
    <updated>2012-08-28T10:52:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/explain-select-on-rails-hepler</id>
    <content type="html"><![CDATA[<p>开始几篇都是扯些闲蛋，从这篇开始多写点技术方面学习的东西，多谈点实际，少谈点主义，做只勤劳的小蜜蜂</p>

<p>rails的actionview提供了简单的select方法生产表单选择项，根据 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html">Api</a> 指示，用法如下：</p>

<p><code>ruby
select(object, method, choices, options = {}, html_options = {})
</code>
<!--more-->
- object是指select选项所修饰的目标对象，通常是一个Model对象
- method是目标对象的属性（方法）名
- choices可以是任何可枚举的对象，数组，Hash或者是包含了选择框的数据库查询结果
- options选项
- html_options是html相关选项</p>

<p>include_blank 会显示值为空的默认选项，prompt 会给个提示选择，比如提示 Select One. <br />
例如对于  @post.person_id =&gt; 2  </p>

<p>```
select(“post”, “person_id”, Person.all.collect {|p| [ p.name, p.id ] }, {:include_blank =&gt; ‘None’})</p>

<p><select name="post[person_id]">
  <option value="">None</option>
  <option value="1">David</option>
  <option value="2" selected="selected">Sam</option>
  <option value="3">Tobias</option>
</select>
```</p>

<p>index =&gt; nil 不显示空选项或提示项，直接显示第一个值</p>

<p>```
select(“album[]”, “genre”, %w[rap rock country], {}, { :index =&gt; nil })</p>

<p><select name="album[][genre]" id="album__genre">
  <option value="rap">rap</option>
  <option value="rock">rock</option>
  <option value="country">country</option>
</select>
```</p>

<p>:disabled =&gt; value 设置一个单独的值或者Prco对象 html标签属性为disable</p>

<p>```
select(“post”, “category”, Post::CATEGORIES, {:disabled =&gt; ‘restricted’})</p>

<p><select name="post[category]">
  <option />
  <option>joke</option>
  <option>poem</option>
  <option disabled="disabled">restricted</option>
</select>
```</p>

<p>当用到collection_select时，可以鉴定一个Proc对象是否disable</p>

<p>```
collection_select(:post, :category_id, Category.all, :id, :name, {:disabled =&gt; lambda{|category| category.archived? }})</p>

<p><select name="post[category_id]">
  <option value="1" disabled="disabled">2008 stuff</option>
  <option value="2" disabled="disabled">Christmas</option>
  <option value="3">Jokes</option>
  <option value="4">Poems</option>
</select>
```</p>

<p>html_option 里面还可以写各种js事件，比如这样</p>

<p><code>
select(:person, :id, Persion.all, {:onchange =&gt; 'doSomething()'})
</code></p>

<h5 id="selecttaghttpapirubyonrailsorgclassesactionviewhelpersformtaghelperhtmlmethod-i-selecttag"><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-select_tag">select_tag</a></h5>

<p><code>
select_tag(name, option_tags = nil, options = {})
</code></p>

<p>option =&gt; {:multiple, :disable, :include_blank, :prompt} 
后三个和select里面用法一样，mutiple 允许同时传递多个值，相当于一个多选框</p>

<p>option_tags 可以自己手写几个option标签，或者用现成的方法，其实就是option标签的helper方法，Api 中的几个 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select">例子</a></p>

<p>```
options_for_select(container, selected = nil)</p>

<p>options_from_collection_for_select(collection, value_method, text_method, selected = nil)
```</p>

<h5 id="collectionselecthttpapirubyonrailsorgclassesactionviewhelpersformoptionshelperhtmlmethod-i-collectionselect"><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select">collection_select</a></h5>

<p><code>
collection_select(object, method, collection, value_method, text_method, options = {}, html_options = {})
</code></p>

<p>collect_select 比 select 多了2个选项，value_method 和 text_method 分别表示 collection 你想选择的对应字段，相当于 select + options_from_collection_for_select 的组合，大致功能其实和 select 差不多</p>

<p>一篇老外5年前写的介绍这几个 select 的 <a href="http://shiningthrough.co.uk/Select-helper-methods-in-Ruby-on-Rails">文章</a>，rails 的中文文档还是太少了。</p>

<p>剩下几个出场率太低的helper</p>

<p>```
grouped_collection_select(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})</p>

<p>grouped_options_for_select(grouped_options, selected_key = nil, prompt = nil)</p>

<p>option_groups_from_collection_for_select(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)
```</p>

<ul>
  <li>grouped_collection_select用法和 collection_select 差不多，只是会生成 optgroup 标签来标识二级选项</li>
  <li>grouped_options_for_select 也是一样，比 options_for_select 多一层 optgroup 标签</li>
  <li>option_groups_from_collection_for_select 同options_from_collection_for_select，都只是在原有基础上修改了下</li>
</ul>

<p>Rails 源码在此，有兴趣的可以拜读下 <a href="https://github.com/rails/rails/blob/27c8debdc6b242c845a279187205a2b057e18469/actionpack/lib/action_view/helpers/form_options_helper.rb#L156">Here</a></p>

<p>用 select 的好处就是书写简洁，可以配合js生产联动查询，比如说最常用的省市查询 <br />
不过对于不熟悉语法的人可能读起来就不如直接 select &gt; option 直接明了，需要花时间去明白什么意思，各有利弊吧</p>
]]></content>
  </entry>
  
</feed>
