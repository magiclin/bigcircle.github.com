<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Hi, I’m dayuan]]></title>
  <link href="http://Bigcircle.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://Bigcircle.github.com/"/>
  <updated>2012-11-15T21:04:58+08:00</updated>
  <id>http://Bigcircle.github.com/</id>
  <author>
    <name><![CDATA[bigcircle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 技巧之 tap & try]]></title>
    <link href="http://Bigcircle.github.com/blog/rails-tricks-about-tap-and-try.html/"/>
    <updated>2012-09-03T14:38:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/rails-tricks-about-tap-and-try</id>
    <content type="html"><![CDATA[<p>tap 和 try 是 Rails 开发过程中两个很常用的方法，在调试和写出简洁代码上有着不错的发挥</p>

<p>从 tap 的 <a href="http://www.ruby-doc.org/core-1.9.3/Object.html#method-i-tap">Api</a> 可以看出，tap 是 Object 的 instance_method，传递 self 给一个 block，最后返回 self.</p>

<p>```ruby
1.9.3p194 :015 &gt; Object.instance_methods.grep /tap/
 =&gt; [:tap]</p>

<p>def tap		#tap 源码实现
  yield self
  self
end
```</p>

<p><strong>用途一：调试</strong>。当你使用链式方法发生错误时，如果需要测试这个过程中哪出了问题，一般的做法是拆断这个方法，设置中间变量，接着测试中间变量是否正确，如果正确，则把变量换个地方继续测试，方法很长时就没法测了，当然 Ruby 为你想好了，有着优雅又简便的实现</p>

<p>```
%w(x y z).push(‘a’).shift.upcase.next # =&gt; “Y”</p>

<p>%w(x y z).push(‘a’).shift.tap {|x| p x }.upcase.next
```</p>

<p>输出每步的结果看看</p>

<p><code>
(1..10)                .tap {|x| puts "original: #{x.inspect}"}
  .to_a                .tap {|x| puts "array: #{x.inspect}"}
  .select {|x| x%2==0} .tap {|x| puts "evens: #{x.inspect}"}
  .map { |x| x*x }     .tap {|x| puts "squares: #{x.inspect}"}
</code>
<!--more--></p>

<p><strong>用途二：简化代码</strong>。我们构建一个方法想返回一个 String / Array / Hash 之类结果，一般的做法是先定义一个变量，结果把运算结果赋值给这个变量，接着返回变量，用 tap 一步搞定，其实就是源码意思的实现</p>

<p><code>
[].tap {|i| i &lt;&lt; "abc"}
''.tap {|i| i &lt;&lt; do_some_thing }
</code></p>

<p>try 可以让你调用对象方法时不用担心对象是nil并抛出异常，依旧先看源码(rails 3.2.8)</p>

<p>```
def try(<em>a, &amp;b)
  if a.empty? &amp;&amp; block_given?
    yield self
  else
    public_send(</em>a, &amp;b) if respond_to?(a.first)
  end
end</p>

<p>def try(*args)
  nil
end
```</p>

<p>上面一个try是对 Object 的扩展，下面的是对 NilClass 的扩展，这就是为什么会nil不会抛出异常的原因，<a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/object/try.rb">源码</a> .
try 如果只接受 block 则传递 self 给 block，返回 block 执行后的结果，否则就执行
<a href="http://www.ruby-doc.org/core-1.9.3/Object.html#method-i-public_send">public_send</a>，public_send 与 send 的不同之处，public_send 只会 call public_method，看例子</p>

<p><code>
@person &amp;&amp; @persion.name
@person ? @person.name : nil
</code></p>

<p>用 try 改写</p>

<p><code>
@person.try(:name)
@person.try { |p| "#{p.first_name} #{p.last_name}" }
</code></p>

<p>try 同样能接受参数、block，</p>

<p><code>
Person.try(:find, 1)
@people.try(:collect) {|p| p.name}
</code></p>

<p>通过源码可以看出 tap 和 try 两个小工具意思都非常明白，用起来也很简单方便，实乃居家简化好帮手</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你可能错过的 Rails 技巧(四)]]></title>
    <link href="http://Bigcircle.github.com/blog/10-things-you-didnt-know-rails-could-do-4.html/"/>
    <updated>2012-08-31T14:47:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/10-things-you-didnt-know-rails-could-do-4</id>
    <content type="html"><![CDATA[<p>这个系列完结篇，貌似内容挺多，但是实用的没几个</p>

<p>从阅读心里学来说，太长的篇幅容易让读者失去忍耐力，文章后面的内容就会草草略过，怎么感觉太长的系列写起来也让我失去忍耐力呢。。。继续忍耐，完结此篇</p>

<p>这篇 <a href="http://blog.plataformatec.com.br/2012/01/my-five-favorite-hidden-features-in-rails-3-2/">blog</a> 介绍了4个最喜欢的 Rails3.2 隐藏特性，这4条都在这个系列中，作者可能也是从这学来的吧</p>

<h6 id="render-any-object">31 - Render Any Object</h6>

<p>```ruby
class Event &lt; ActiveRecord::Base
  # …
  def to_partial_path
    “events/#{trigger}”  # events/edit or events/view
  end
end</p>

<p>&lt;%= render partial: @events, as: :event %&gt;
```</p>

<p><a href="http://edgeapi.rubyonrails.org/classes/ActiveModel/Conversion.html#method-i-to_partial_path">to_partial_path</a> 是 ActiveModel 內建的实例方法，返回一个和可识别关联对象路径的字符串，原文是这么说的，目前还没看明白这么用的目的在哪</p>

<p><code>
Returns a string identifying the path associated with the object.
ActionPack uses this to find a suitable partial to represent the object.
</code></p>

<h6 id="group-option">32 - 生成 group option</h6>

<p><code>
&lt;%= select_tag( :grouped_menu, grouped_options_for_select(
  "Group A" =&gt; %w[One Two Three],
  "Group B" =&gt; %w[One Two Three]
) ) %&gt;
</code></p>

<p>这个其实就是用到了 grouped_options_for_select ，我在前面的 <a href="http://dayuan.im/blog/explain-select-on-rails-hepler.html/">博文</a> 提到过这几个 select 的用法</p>

<!--more-->

<h6 id="form-">33 -定制你自己喜欢的 form 表单</h6>

<p><code>
class LabeledFieldsWithErrors &lt; ActionView::Helpers::FormBuilder
  def errors_for(attribute)
    if (errors = object.errors[attribute]).any?
      @template.content_tag(:span, errors.to_sentence, class: "error")
    end
  end
  def method_missing(method, *args, &amp;block)
    if %r{ \A (?&lt;labeled&gt;labeled_)?
              (?&lt;wrapped&gt;\w+?)
              (?&lt;with_errors&gt;_with_errors)? \z }x =~ method and
       respond_to?(wrapped) and [labeled, with_errors].any?(&amp;:present?)
      attribute, tags = args.first, [ ]
      tags           &lt;&lt; label(attribute) if labeled.present?
      tags           &lt;&lt; send(wrapped, *args, &amp;block)
      tags           &lt;&lt; errors_for(attribute) if with_errors.present?
      tags.join(" ").html_safe
    else
      super
    end
  end
end
</code></p>

<p>定义了几个不想去看懂的 method_missing 方法。。
修改 application.rb，添加配置</p>

<p><code>
class Application &lt; Rails::Application
  # ...
  require "labeled_fields_with_errors"
  config.action_view.default_form_builder = LabeledFieldsWithErrors
  config.action_view.field_error_proc     = -&gt;(field, _) { field }
end
</code></p>

<p>创建 form 表单可以这样书写</p>

<p>```
&lt;%= form_for @article do |f| %&gt;</p>
<p>&lt;%= f.text_field
  <p>&lt;%= f.labeled_text_field
  <p>&lt;%= f.text_field_with_errors
  <p>&lt;%= f.labeled_text_field_with_errors :subject %&gt;</p>
  &lt;%= f.submit %&gt;
&lt;% end %&gt;
```

生成如下的 html 页面

```
<p><input id="article_subject" name="article[subject]" size="30" type="text" value="" /></p>
<p><label for="article_subject">Subject</label>
   <input id="article_subject" name="article[subject]" size="30" type="text" value="" /></p>
<p><input id="article_subject" name="article[subject]" size="30" type="text" value="" />
   <span class="error">can't be blank</span></p>
<p><label for="article_subject">Subject</label>
   <input id="article_subject" name="article[subject]" size="30" type="text" value="" />
   <span class="error">can't be blank</span></p>
<!-- ... -->
```

不是很喜欢这种方式，反而把简单的html搞复杂了，让后来维护的人增加额外的学习成本

###### 34 - Inspire theme songs about your work (再次暖场时刻)

2011年 Farmhouse Conf 上主持人 Ron Evans 专门用口琴演奏了为大神 Tenderlove 写的歌 - [Ruby Hero Tenderlove! ](http://www.confreaks.com/videos/529-farmhouseconf-ruby-hero-tenderlove)，听了半天不知道唱的啥。。

想找下有没有美女 Rubist, 看了下貌似没有，都是大妈，这位 [Meghann Millard](http://www.confreaks.com/videos/534-farmhouseconf-meghann-millard) 尚可远观，大姐装束妖娆，手握纸条，蚊蝇环绕，不时微笑，长的真有点像 gossip girl 里面的 Jenny Humphrey

###### 35 - 灵活的异常操作

修改 application.rb 定义

```
class Application &lt; Rails::Application
# ...
  config.exceptions_app = routes
end
```
每次有异常时路由都会被调用，你可以用下面的方法简单 render 404 页面

```
match "/404", :to =&gt; "errors#not_found"
```

这个例子也在开头提到的那篇博文里面，感兴趣可以去自己研究下

###### 36 - 给 Sinatra 添加路由

```
- Gemfile

source 'https://rubygems.org'
# ...
gem "resque", require: "resque/server"



module AdminValidator

  def matches?(request)
    if (id = request.env["rack.session"]["user_id"])
      current_user = User.find_by_id(id)
      current_user.try(:admin?)
    else
      false
    end
  end
end
```

挂载 Resque::Server 至 /admin/resque

```
Blog::Application.routes.draw do
  # ...
  require "admin_validator"
  constraints AdminValidator do
    mount Resque::Server, at: "/admin/resque"
  end
end
```

这个也没有试验，不清楚具体用法，sinatra 平时也基本不用

######　37 - 导出CSV流

```
class ArticlesController &lt; ApplicationController
  def index
    respond_to do |format|
      format.html do
        @articles = Article.all
      end
      format.csv do
        headers["Content-Disposition"] = %Q{attachment; filename="articles.csv"}
        self.response_body = Enumerator.new do |response|
          csv  = CSV.new(response, row_sep: "\n")
          csv &lt;&lt; %w[Subject Created Status]
          Article.find_each do |article|
            csv &lt;&lt; [ article.subject,
                     article.created_at.to_s(:long),
                     article.status ]
        ￼￼	end
        end
      end
    end
  end
# ...
end
```

导出 csv 是很常用的功能，很多时候报表都需要，这个还是比较实用的

###### 38 - do some work in the background

给 articles 添加文本类型 stats 字段

```
rails g migration add_stats_to_articles stats:text
```

添加一个计算 stats 方法 和 一个 after_create 方法，在创建一条记录后，会把 calculate_stats 添加到 Queue 队列，当队列中有任务时，后台创建一个线程执行该 job

```
class Article &lt; ActiveRecord::Base
  # ...
  serialize :stats
  def calculate_stats
    words = Hash.new(0)
    body.to_s.scan(/\S+/) { |word| words[word] += 1 }
    sleep 10  # simulate a lot of work
    self.stats = {words: words}
  end

  require "thread"
  def self.queue; @queue ||= Queue.new end
  def self.thread
    @thread ||= Thread.new do
      while job = queue.pop
        job.call
      end
    end
  end
  thread  # start the Thread

  after_create :add_stats
  def add_stats
    self.class.queue &lt;&lt; -&gt; { calculate_stats; save }
  end
end
```

添加一条记录，10秒后会自动给该记录 stats 字段添加 words Hash

```
$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; Article.create!(subject: "Stats", body: "Lorem ipsum...");
Time.now.strftime("%H:%M:%S")
=&gt; "15:24:10"
&gt;&gt; [Article.last.stats, Time.now.strftime("%H:%M:%S")]
=&gt; [nil, "15:24:13"]
&gt;&gt; [Article.last.stats, Time.now.strftime("%H:%M:%S")]
=&gt;[{:words=&gt;{"Lorem"=&gt;1, "ipsum"=&gt;1, ...}, "15:24:26"]
```

###### 39 - 用 Rails 生成静态站点

修改 config/environment/development.rb

```
Static::Application.configure do
  # ...
  # Show full error reports and disable caching
  config.consider_all_requests_local       = true
  config.action_controller.perform_caching = !!ENV["GENERATING_SITE"]
  # ...
  # Don't fallback to assets pipeline if a precompiled asset is missed
  config.assets.compile = !ENV["GENERATING_SITE"]
  # Generate digests for assets URLs
  config.assets.digest = !!ENV["GENERATING_SITE"]
  # ...
end


class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  if ENV["GENERATING_SITE"]
    after_filter do |c|
      c.cache_page(nil, nil, Zlib::BEST_COMPRESSION)
    end
  end
end
```

修改 rake static:generate 任务

```
require "open-uri"
namespace :static do
  desc "Generate a static copy of the site"
  task :generate =&gt; %w[environment assets:precompile] do
    site = ENV.fetch("RSYNC_SITE_TO") { fail "Must set RSYNC_SITE_TO" }
    server = spawn( {"GENERATING_SITE" =&gt; "true"},
                    "bundle exec rails s thin -p 3001" )
    sleep 10  # FIXME: start when the server is up

    # FIXME: improve the following super crude spider
    paths = %w[/]
    files = [ ]
    while path = paths.shift
      files &lt;&lt; File.join("public", path.sub(%r{/\z}, "/index") + ".html")
      File.unlink(files.last) if File.exist? files.last
      files &lt;&lt; files.last + ".gz"
      File.unlink(files.last) if File.exist? files.last
      page = open("http://localhost:3001#{path}") { |url| url.read }
      page.scan(/&lt;a[^&gt;]+href="([^"]+)"/) do |link|
        paths &lt;&lt; link.first
      end
    end

    system("rsync -a public #{site}")

    Process.kill("INT", server)
    Process.wait(server)
    system("bundle exec rake assets:clean")
    files.each do |file|
      File.unlink(file)
    end
  end
end
```

生成到某个地方，去查看吧

```
rake static:generate RSYNC_SITE_TO=/Users/james/Desktop
```

后面几个都不感兴趣，没有测试，说好的42个，瞎扯了3个pass掉了，实在是吐血了

Over.
</p></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你可能错过的 Rails 技巧(三)]]></title>
    <link href="http://Bigcircle.github.com/blog/10-things-you-didnt-know-rails-could-do-3.html/"/>
    <updated>2012-08-31T09:55:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/10-things-you-didnt-know-rails-could-do-3</id>
    <content type="html"><![CDATA[<p>中场休息时，去找了下 RailsConf 2012 的视频看了看，刚好看到关于 <a href="http://confreaks.com/videos/889-railsconf2012-ten-things-you-didn-t-know-rails-could-do">这篇</a> 的介绍，片子还挺长，41分钟，演讲者长相和声音都很不符合大家对 Rails 的认知，大家有兴趣的可以去听听</p>

<h6 id="section">21 - 自动写文件</h6>

<p><code>ruby
class Comment &lt; ActiveRecord::Base
  # ...
  Q_DIR = (Rails.root + "comment_queue").tap(&amp;:mkpath)
  after_save :queue_comment
  def queue_comment
    File.atomic_write(Q_DIR + "#{id}.txt") do |f|
      f.puts "Article: #{article.subject}"
      f.puts "User:    #{user.name}"
      f.puts body
    end
  end
end
</code></p>

<p>找了下 <a href="http://api.rubyonrails.org/">Api</a> 是 Rails 对 Ruby 基础类的扩展</p>

<h6 id="hash">22 - 合并嵌套 Hash</h6>

<p><code>
$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; {nested: {one: 1}}.merge(nested: {two: 2})
=&gt; {:nested=&gt;{:two=&gt;2}}
&gt;&gt; {nested: {one: 1}}.deep_merge(nested: {two: 2})
=&gt; {:nested=&gt;{:one=&gt;1, :two=&gt;2}}
</code></p>

<p>主要是用到了 deep_merge 合并相同的 key
<!--more--></p>

<h6 id="hash-except">23 - Hash except</h6>

<p><code>
$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; params = {controller: "home", action: "index", from: "Google"}
=&gt; {:controller=&gt;"home", :action=&gt;"index", :from=&gt;"Google"}
&gt;&gt; params.except(:controller, :action)
=&gt; {:from=&gt;"Google"}
</code></p>

<p>这个方法经常会用到，可能用的人也很多</p>

<h6 id="add-defaultss-to-hash">24 - add defaultss to Hash</h6>

<p><code>
$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; {required: true}.merge(optional: true)
=&gt; {:required=&gt;true, :optional=&gt;true}
&gt;&gt; {required: true}.reverse_merge(optional: true)
=&gt; {:optional=&gt;true, :required=&gt;true}
&gt;&gt; {required: true, optional: false}.merge(optional: true)
=&gt; {:required=&gt;true, :optional=&gt;true}
&gt;&gt; {required: true, optional: false}.reverse_merge(optional: true)
=&gt; {:optional=&gt;false, :required=&gt;true}
</code></p>

<p>这几个都是对 Hash 类的增强，merge 会替换原有相同 key 的值，但 reverse_merge 不会</p>

<p>从源码就可以看出，会事先 copy 一份 default hash</p>

<p><code>
def reverse_merge(other_hash)
  super
  self.class.new_from_hash_copying_default(other_hash)
end
</code></p>

<h6 id="stringvalue-">25 - String.value? 方法</h6>

<p>看下面的几个例子</p>

<p><code>
$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; env = Rails.env
=&gt; "development"
&gt;&gt; env.development?
=&gt; true
&gt;&gt; env.test?
=&gt; false
&gt;&gt; "magic".inquiry.magic?
=&gt; true
&gt;&gt; article = Article.first
=&gt; #&lt;Article id: 1, ..., status: "Draft"&gt;
&gt;&gt; article.draft?
=&gt; true
&gt;&gt; article.published?
=&gt; false
</code></p>

<p>env, “magic” 可以直接使用 value? 的方法，这个扩展是 String#inquiry 方法</p>

<p>```
def inquiry
  ActiveSupport::StringInquirer.new(self)
end</p>

<h1 id="methodmissing-">用method_missing 实现</h1>
<p>def method_missing(method_name, *arguments)
  if method_name.to_s[-1,1] == “?”
    self == method_name.to_s[0..-2]
  else
    super
  end
end
```</p>

<p>类型的一个例子，同样用到了 inquiry 方法</p>

<p><code>
class Article &lt; ActiveRecord::Base
  # ...
  STATUSES = %w[Draft Published]
  validates_inclusion_of :status, in: STATUSES
  def method_missing(method, *args, &amp;block)
    if method =~ /\A#{STATUSES.map(&amp;:downcase).join("|")}\?\z/
      status.downcase.inquiry.send(method)
    else
      super
    end
  end
end
</code></p>

<h6 id="section-1">26 - 让你成为杂志的封面 （暖场之用）</h6>

<p>搞笑哥拿出了 DHH 当选 Linux journal 杂志封面的图片，会场也是哄堂大笑 ^.^</p>

<p><img src="http://www.rubyinside.com/wp-content/uploads/2006/05/dhh.png" alt="" /></p>

<h6 id="section-2">27 - 隐藏用户评论</h6>

<p>```
<!-- HTML comments stay in the rendered content -->
&lt;%# ERb comments do not %&gt;</p>
<h1>Home Page</h1>
<p># 生成的 html</p>
<body>
<!-- HTML comments stay in the rendered content -->
<h1>Home Page</h1>
</body>
<p>```</p>

<p>这个一下没看懂。。试了下项目里面的代码，原来是隐藏的意思。。</p>

<h6 id="erb-">28 - 理解更短的 erb 语法</h6>

<p>```
# …
module Blog
  class Application &lt; Rails::Application</p>

<pre><code># Broken:  config.action_view.erb_trim_mode = '%'
ActionView::Template::Handlers::ERB.erb_implementation =
  Class.new(ActionView::Template::Handlers::Erubis) do
    include ::Erubis::PercentLineEnhancer
  end
￼￼￼￼end   end end ```
</code></pre>

<p>接着在 view 页面替换用 % 表示原来 &lt;% if %&gt; &lt;% end %&gt;，有点像 slim</p>

<p><code>
% if current_user.try(:admin?)
  &lt;%= render "edit_links" %&gt;
% end
</code></p>

<h6 id="block-">29 - 用 block 避免视图层赋值</h6>

<p>```</p>
<table>
  &lt;% @cart.products.each do |product| %&gt;
    <tr>
      <td>&lt;%= product.name %&gt;</td>
      <td>&lt;%= number_to_currency product.price %&gt;</td>
    </tr>
  &lt;% end %&gt;
  <tr>
    <td>Subtotal</td>
    <td>&lt;%= number_to_currency @cart.total %&gt;</td>
  </tr>
  <tr>
    <td>Tax</td>
    <td>&lt;%= number_to_currency(tax = calculate_tax(@cart.total)) %&gt;</td>
  </tr>
  <tr>
    <td>Total</td>
    <td>&lt;%= number_to_currency(@cart.total + tax) %&gt;</td>
  </tr>
</table>
<p>```</p>

<p><code>tax = calculate_tax(@cart.total)</code> 会先被赋值再被下面引用</p>

<p>用 block 重构下，把逻辑代码放到 helper 里面</p>

<p><code>
module CartHelper
  def calculate_tax(total, user = current_user)
    tax = TaxTable.for(user).calculate(total)
    if block_given?
      yield tax
    else
      tax
    end
  end
end
</code></p>

<p>```</p>
<table>
  &lt;% @cart.products.each do |product| %&gt;
    <tr>
      <td>&lt;%= product.name %&gt;</td>
      <td>&lt;%= number_to_currency product.price %&gt;</td>
    </tr>
  &lt;% end %&gt;
  <tr>
    <td>Subtotal</td>
    <td>&lt;%= number_to_currency @cart.total %&gt;</td>
  </tr>
  &lt;% calculate_tax @cart.total do |tax| %&gt;
    <tr>
      <td>Tax</td>
      <td>&lt;%= number_to_currency tax %&gt;</td>
    </tr>
    <tr>
      <td>Total</td>
      <td>&lt;%= number_to_currency(@cart.total + tax) %&gt;</td>
    </tr>
  &lt;% end %&gt;
</table>
<p>```</p>

<h6 id="section-3">30 - 同时生成多个标签</h6>

<p>```</p>
<h1>Articles</h1>
<p>&lt;% @articles.each do |article| %&gt;
    &lt;%= content_tag_for(:div, article) do %&gt;
    &lt;h2&gt;&lt;%= article.subject %&gt;&lt;/h2&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
```</p>

<p>```
&lt;%= content_tag_for(:div, @articles) do |article| %&gt;</p>
<h2>&lt;%= article.subject %&gt;</h2>
<p>&lt;% end %&gt;
```</p>

<p>content_tag_for 具体用法可以参考 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/RecordTagHelper.html#method-i-content_tag_for">Api</a>，意思比较明白</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你可能错过的 Rails 技巧(二)]]></title>
    <link href="http://Bigcircle.github.com/blog/10-things-you-didnt-know-rails-could-do-2.html/"/>
    <updated>2012-08-30T21:39:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/10-things-you-didnt-know-rails-could-do-2</id>
    <content type="html"><![CDATA[<p>接着上期说 <a href="http://dayuan.im/blog/10-things-you-didnt-know-rails-could-do-1.html/">你可能错过的 Rails 技巧(一)</a></p>

<h6 id="section">11 - 显示数据迁移记录</h6>

<p><code>ruby
rake db:migrate:status
</code></p>

<p>会输出 migration 的状态，这在解决迁移版本冲突的时候很有用</p>

<p>```
database: db/development.sqlite3</p>

<p>status   Migration ID    Migration Name
 —————————————
   up     20120414155612  Create users
   up     20120414160528  Create articles
  down    20120414161355  Create comments
```</p>

<h6 id="csv-">12 - 导入 csv 文件</h6>

<p>csv 文件内容如下</p>

<p><code>
Name,Email
James,james@example.com
Dana,dana@example.com
Summer,summer@example.com
</code></p>

<p>创建 rake 任务导入 users 表</p>

<!--more-->

<p><code>
require 'csv'
namespace :users do
  desc "Import users from a CSV file"
  task :import =&gt; :environment do
    path = ENV.fetch("CSV_FILE") {
      File.join(File.dirname(__FILE__), *%w[.. .. db data users.csv])
    }
    CSV.foreach(path, headers: true, header_converters: :symbol) do |row|
      User.create(row.to_hash)
    end
  end
end
</code></p>

<h6 id="csv">13 - 数据库中储存 csv</h6>

<p>```
class Article &lt;  ActiveRecord::Base
  require ‘csv’
  module CSVSerializer
    module_function
    def load(field); field.to_s.parse_csv; end
    def dump(object); Array(object).to_csv; end
  end
  serialize :categories, CSVSerializer</p>

<p>attr_accessible :body, :subject, :categories
end
```</p>

<p>serialize 用于在文本字段储存序列化的值，如序列，Hash，Array等，例如</p>

<p><code>
user = User.create(:preferences =&gt; { "background" =&gt; "black", "display" =&gt; large })
User.find(user.id).preferences # =&gt; { "background" =&gt; "black", "display" =&gt; large }
</code></p>

<p>这个例子中将 CSVSerializer to_csv序列化之后储存在 categories 这个文本类型字段中</p>

<h6 id="pluck-">14 - 用 pluck 查询</h6>

<p>```
$ rails c
loading development environment(Rails 3.2.3)</p>

<blockquote>
  <blockquote>
    <p>User.select(:email).map(&amp;:email)
  User Load(0.1ms) SELECT email FROM “users”
=&gt; [“james@example.com”, “dana@example.com”, “summer@example.com”]
User.pluck(:email)
   (0.2ms) SELECT email FROM “users”
=&gt; [“james@example.com”, “dana@example.com”, “summer@example.com”]
User.uniq.pluck(:email)
   (0.2ms) SELECT DISTINCT email FROM “users”
=&gt; [“james@example.com”, “dana@example.com”, “summer@example.com”]
```</p>
  </blockquote>
</blockquote>

<p>pluck 的实现方式其实也是 select 之后再 map</p>

<p><code>
def pluck(column_name)
  column_name = column_name.to_s
  klass.connection.select_all(select(column_name).arel).map! do |attributes|
    klass.type_cast_attribute(attributes.keys.first, klass.initialize_attributes(attributes))
  end
end
</code></p>

<h6 id="group-count">15 - 使用 group count</h6>

<p>创建 article 关联 model event</p>

<p><code>
rails g resource event article:belongs_to triggle
</code></p>

<p>创建3条 edit 记录和10条 view 记录。 Event.count 标明有13条记录，
group(:triggle).count 表示统计 triggle group 之后的数量，也可以用 count(:group =&gt; :trigger)</p>

<p>```
$ rails c</p>

<blockquote>
  <blockquote>
    <p>article = Article.last
=&gt; #&lt;Article id:1, …&gt;
{edit:3, view:10}.each do |trigger, count|
?&gt;   count.times do
?&gt;     Event.new(trigger: trigger).tap{ |e| e.article= article; e.save! }
?&gt;   end
=&gt; {:edit =&gt; 3, :view =&gt; 10}
Event.count
=&gt; 13
Event.group(:trigger).count
=&gt; {“edit” =&gt; 3, “view” =&gt; 10}
```</p>
  </blockquote>
</blockquote>

<h6 id="section-1">16 - 覆盖关联关系</h6>

<p>```
class Car &lt; ActiveRecord::Base
  belongs_to :owner
  belongs_to :previous_owner, class_name: “Owner”</p>

<p>def owner=(new_owner)
    self.previous_owner = owner
    super
  end
end
```</p>

<p>car更改 owner 时，如果有了 new_owner，就把原 owner 赋给 previous_owner，注意要加上 super</p>

<h6 id="section-2">17 - 构造示例数据</h6>

<p><code>
$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; User.find(1)
=&gt; #&lt;User id: 1, name: "James", email: "
￼￼￼￼￼￼￼james@example.com", ...&gt;
￼￼￼￼￼&gt;&gt; jeg2 = User.instantiate("id" =&gt; 1, "email" =&gt; "
￼￼￼￼=&gt; #&lt;User id: 1, email: "james@example.com"&gt;
&gt;&gt; jeg2.name = "James Edward Gray II"
￼￼￼￼=&gt; "James Edward Gray II"
&gt;&gt; jeg2.save!
=&gt; true
&gt;&gt; User.find(1)
￼￼￼￼￼￼james@example.com", ...&gt;
</code></p>

<p>伪造一条记录，并不是数据库中的真实数据，也不会把原有数据覆盖</p>

<h6 id="postgresql--string">18 - PostgreSQL 中使用无限制的 string</h6>

<p>去掉适配器中对 string 长度的限制，这个应该是 PostgreSQL 数据库的特性</p>

<p><code>
module PsqlApp
  class Application &lt; Rails::Application
    # Switch to limitless strings
    initializer "postgresql.no_default_string_limit" do
      ActiveSupport.on_load(:active_record) do
        adapter = ActiveRecord::ConnectionAdapters::PostgreSQLAdapter
        adapter::NATIVE_DATABASE_TYPES[:string].delete(:limit)
      end
    end
 end
end
</code></p>

<p>创建 user 表，bio 字符串</p>

<p><code>
rails g resource user bio
</code></p>

<p><code>
$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; very_long_bio = "X" * 10_000; :set
=&gt; :set
&gt;&gt; User.create!(bio: very_long_bio)
=&gt; #&lt;User id: 1, bio:
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XX...", created_at: "2012-04-14 23:02:08",
updated_at: "2012-04-14 23:02:08"&gt;
&gt;&gt; User.last.bio.size
=&gt; 10000
</code></p>

<h6 id="postgresql-">19 - PostgreSQL 中使用全文搜索</h6>

<p><code>
rails g resource article subject body:text
</code></p>

<p>更改迁移文件，添加索引和 articles_search_update 触发器</p>

<p><code>
class CreateArticles &lt; ActiveRecord::Migration
  def change
    create_table :articles do |t|
      t.string :subject
      t.text   :body
      t.column :search, "tsvector"
      t.timestamps
    end
    execute &lt;&lt;-END_SQL
      CREATE INDEX articles_search_index
      ON articles USING gin(search);
      CREATE TRIGGER articles_search_update
      BEFORE INSERT OR UPDATE ON articles
      FOR EACH ROW EXECUTE PROCEDURE
      tsvector_update_trigger( search, 'pg_catalog.english', subject, body);
    END_SQL
  end
end
</code></p>

<p>Model 中添加 search 方法</p>

<p><code>
class Article &lt; ActiveRecord::Base
  attr_accessible :body, :subject
  def self.search(query)
    sql = sanitize_sql_array(["plainto_tsquery('english', ?)", query])
    where(
      "search @@ #{sql}"
    ).order(
      "ts_rank_cd(search, #{sql}) DESC"
    )
end end
</code></p>

<p>PostgreSQL 数据库没用过，这段看例子吧</p>

<p><code>
$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; Article.create!(subject: "Full Text Search")
=&gt; #&lt;Article id: 1, ...&gt;
&gt;&gt; Article.create!(body: "A stemmed search.")
=&gt; #&lt;Article id: 2, ...&gt;
&gt;&gt; Article.create!(body: "You won't find me!")
=&gt; #&lt;Article id: 3, ...&gt;
&gt;&gt; Article.search("search").map { |a| a.subject || a.body }
=&gt; ["Full Text Search", "A stemmed search."]
&gt;&gt; Article.search("stemming").map { |a| a.subject || a.body }
=&gt; ["A stemmed search."]
</code></p>

<h6 id="section-3">21 - 每个用户使用不同的数据库</h6>

<p>```
- user_database.rb</p>

<p>def connect_to_user_database(name)
  config = ActiveRecord::Base.configurations[“development”].merge(“database” =&gt; “db/#{name}.sqlite3”)
  ActiveRecord::Base.establish_connection(config)
end
```</p>

<p>创建 rake 任务：新增用户数据库和创建</p>

<p>```
require “user_database”</p>

<p>namespace :db do
  desc “Add a new user database”
  task :add =&gt; %w[environment load_config] do
    name = ENV.fetch(“DB_NAME”) { fail “DB_NAME is required” }
    connect_to_user_database(name)
    ActiveRecord::Base.connection
  end</p>

<p>namespace :migrate do
    desc “Migrate all user databases”
    task :all =&gt; %w[environment load_config] do
      ActiveRecord::Migration.verbose = ENV.fetch(“VERBOSE”, “true”) == “true”
      Dir.glob(“db/*.sqlite3”) do |file|
        next if file == “db/test.sqlite3”
        connect_to_user_database(File.basename(file, “.sqlite3”))
        ActiveRecord::Migrator.migrate(
          ActiveRecord::Migrator.migrations_paths,
          ENV[“VERSION”] &amp;&amp; ENV[“VERSION”].to_i
        ) do |migration|
          ENV[“SCOPE”].blank? || (ENV[“SCOPE”] == migration.scope)
        end
      end
    end
  end
end
```</p>

<p>执行几个rake 任务创建不同的数据库</p>

<p><code>
$ rails g resource user name
$ rake db:add DB_NAME=ruby_rogues
$ rake db:add DB_NAME=grays
$ rake db:migrate:all
==  CreateUsers: migrating ==================================
-- create_table(:users)
   -&gt; 0.0008s
==  CreateUsers: migrated (0.0008s) =========================
==  CreateUsers: migrating ==================================
-- create_table(:users)
   -&gt; 0.0007s
==  CreateUsers: migrated (0.0008s) =========================
</code></p>

<p>创建几条记录，为不同的数据库创建不同的数据</p>

<p><code>
$ rails c
&gt;&gt; connect_to_user_database("ruby_rogues")
=&gt; #&lt;ActiveRecord::ConnectionAdapters::ConnectionPool...&gt;
&gt;&gt; User.create!(name: "Chuck")
=&gt; #&lt;User id: 1, name: "Chuck", ...&gt;
&gt;&gt; User.create!(name: "Josh")
=&gt; #&lt;User id: 2, name: "Josh", ...&gt;
&gt;&gt; User.create!(name: "Avdi")
=&gt; #&lt;User id: 3, name: "Avdi", ...&gt;
...
&gt;&gt; connect_to_user_database("grays")
=&gt; #&lt;ActiveRecord::ConnectionAdapters::ConnectionPool...&gt;
&gt;&gt; User.create!(name: "James")
=&gt; #&lt;User id: 1, name: "James", ...&gt;
&gt;&gt; User.create!(name: "Dana")
=&gt; #&lt;User id: 2, name: "Dana", ...&gt;
&gt;&gt; User.create!(name: "Summer")
=&gt; #&lt;User id: 3, name: "Summer", ...&gt;
</code></p>

<p>ApplicationController 里面添加 before_filter 根据登陆的二级域名判断连接哪个数据库</p>

<p><code>
class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  before_filter :connect_to_database
private
  def connect_to_database
    connect_to_user_database(request.subdomains.first)
  end
end
</code></p>

<p>中场休息，未完待续。。。内容真心多啊，不过有用的不多</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你可能错过的 Rails 技巧(一)]]></title>
    <link href="http://Bigcircle.github.com/blog/10-things-you-didnt-know-rails-could-do-1.html/"/>
    <updated>2012-08-30T11:22:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/10-things-you-didnt-know-rails-could-do-1</id>
    <content type="html"><![CDATA[<p>记得前段时间 RailsConf2012 之后看过一个不错的pdf，<a href="https://speakerdeck.com/u/jeg2/p/10-things-you-didnt-know-rails-could-do">10 things you didn’t know rails could do</a></p>

<p>说是10个，但是给出了42个实例，这几天抽空又回味了下，料很多，写的很好，顺便总结学习下</p>

<p>Pass 掉第一个 <a href="http://fridayhug.com">fridayhug</a>，我们是开心拥抱每一天</p>

<h6 id="rails-app">1 - 最小的rails app</h6>

<p>```ruby
%w(action_controller/railtie coderay markaby).map &amp;method(:require)</p>

<p>run TheSmallestRailsApp ||= Class.new(Rails::Application) {
  config.secret_token = routes.append {
    root to: proc {
      [200, {“Content-Type” =&gt; “text/html”}, [Markaby::Builder.new.html {
        title @title = “The Smallest Rails App”
        h3 “I am #@title!”
        p “Here is my source code:”
        div { CodeRay.scan_file(<strong>FILE</strong>).div(line_numbers: :table) }
        p { a “Make me smaller”, href: “//goo.gl/YdRpy” }
      }]]
    }
  }.to_s
  initialize!
}
```</p>

<h6 id="todo">2 - 提醒功能 TODO</h6>

<p>```
class UsersController &lt; ApplicationController
  # TODO:  Make it possible to create new users.
end</p>

<p>class User &lt; ActiveRecord::Base
  # FIXME: Should token really  be accessible?
  attr_accessible :bil, :email, :name, :token
end</p>

<p>&lt;%# OPTIMIZE: Paginate this listing. %&gt;
&lt;%= render Article.all %&gt;
```</p>

<p>执行 <code>rake notes</code>
<!--more--></p>

<p>```
app/controllers/users_controller.rb:
  * [ 2] [TODO] Make it possible to create new users.</p>

<p>app/models/user.rb:
  * [ 2] [FIXME] Should token really be accessible?</p>

<p>app/views/articles/index.html.erb:
  * [ 1] [OPTIMIZE] Paginate this listing.
```</p>

<p>查看单独的 TODO / FIXME / OPTIMIZE</p>

<p>```
rake notes:todo</p>

<p>app/controllers/users_controller.rb:
  * [ 2] Make it possible to create new users.
```</p>

<p>可以自定义提醒名称</p>

<p><code>
class Article &lt; ActiveRecord::Base
  belongs_to :user
  attr_accessible :body, :subject
  # JEG2: Add that code from your blog here.
end
</code>
不过需要敲一长串，可以alias个快捷键</p>

<p>```
rake notes:custom ANNOTATION=JEG2</p>

<p>app/models/article.rb:
  * [ 4]Add that code from your blog here.
```</p>

<h6 id="rails-c">3 - 沙箱模式执行 rails c</h6>

<p><code>
rails c --sandbox
</code></p>

<p>沙箱模式会有回滚事务机制，对数据库的操作在退出之前都会自动回滚到之前未修改的数据</p>

<h6 id="rails-c--rails-helper-">4 - 在 rails c 控制台中使用 rails helper 方法</h6>

<p><code>
$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; helper.number_to_currency(100)
=&gt; "$100.00"
&gt;&gt; helper.time_ago_in_words(3.days.ago)
=&gt; "3 days"
</code></p>

<h6 id="thin--webrick">5 - 开发模式用 thin 代替 webrick</h6>

<p>```
group :development do
  gem ‘thin’
end</p>

<p>rails s thin / thin start
```</p>

<h6 id="section">6 - 允许自定义配置</h6>

<p>```
 - lib/custom/railtie.rb</p>

<p>module Custom
   class Railtie &lt; Rails::Railtie
     config.custom = ActiveSupport::OrderedOptions.new
   end
 end</p>

<ul>
  <li>config/application.rb</li>
</ul>

<p>require_relative “../lib/custom/railtie”</p>

<p>module Blog
   class Application &lt; Rails::Application
     # …
     config.custom.setting = 42
   end
 end
```</p>

<h6 id="keep-funny">7 - keep funny</h6>

<p>作者给出了个介绍 ruby 以及一些相关 blog的网站 <a href="http://www.rubydramas.com">rubydramas</a>，搞笑的是这个网站右上角标明</p>

<p><code>
Powered by PHP
</code></p>

<p>用 <a href="http://isitrails.com">isitrails.com</a> 检查了下，果然不是用 rails 做的，这个应该是作者分享 ppt 过程中的一个小插曲吧</p>

<h6 id="section-1">8 -理解简写的迁移文件</h6>

<p><code>
rails g resources user name:string email:string token:string bio:text
</code></p>

<p>字段会被默认为 string 属性，查看了下 <a href="https://github.com/rails/rails/blob/master/railties/lib/rails/generators/generated_attribute.rb#LC55">源码</a>，果然有初始化定义</p>

<p><code>
rails g resources user name email token:string{6} bio:text
</code></p>

<p>会生成用样的 migration 文件</p>

<p><code>
class CreateUsers &lt; ActiveRecord::Migration
  def change
    create_table :users do |t|
      t.string :name
      t.string :email
      t.string :token, :limit =&gt; 6
      t.text :bio
      t.timestamps
    end
  end
end
</code></p>

<h6 id="migration-">9 - 给 migration 添加索引</h6>

<p><code>
rails g resource user name:index email:uniq token:string{6} bio:text
</code></p>

<p>会生成 name 和 email 的索引，同时限定 email 唯一</p>

<p>```
class CreateUsers &lt; ActiveRecord::Migration
  def change
    create_table :users do |t|
      t.string :name
      t.string :email
      t.string :token, :limit =&gt; 6
      t.text :bio
      t.timestamps
    end</p>

<pre><code>add_index :users, :name
add_index :users, :email, :unique =&gt; true   end end ```
</code></pre>

<h6 id="section-2">10 - 添加关联关系</h6>

<p><code>
rails g resource article user:references subject body:text
</code></p>

<p>会自动关联生成对应的 belongs_to 和 外键，并添加索引</p>

<p><code>
class CreateArticles &lt; ActiveRecord::Migration
  def change
    create_table :articles do |t|
      t.references :user
      t.string :subject
      t.text :body
      t.timestamps
    end
    add_index :articles, :user_id
  end
end
</code></p>

<p><code>
class Article &lt; ActiveRecord::Base
  belongs_to :user
  attr_accessible :body, :subject
end
</code></p>

<p>未完待续。。。太长了，还是分期吧</p>
]]></content>
  </entry>
  
</feed>
