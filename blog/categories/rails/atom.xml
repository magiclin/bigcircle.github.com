<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Hi, I’m dayuan]]></title>
  <link href="http://Bigcircle.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://Bigcircle.github.com/"/>
  <updated>2012-08-29T00:46:31+08:00</updated>
  <id>http://Bigcircle.github.com/</id>
  <author>
    <name><![CDATA[bigcircle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails view select 方法学习]]></title>
    <link href="http://Bigcircle.github.com/blog/explain-select-on-rails-hepler.html/"/>
    <updated>2012-08-28T10:52:00+08:00</updated>
    <id>http://Bigcircle.github.com/blog/explain-select-on-rails-hepler</id>
    <content type="html"><![CDATA[<p>开始几篇都是扯些闲蛋，从这篇开始多写点技术方面学习的东西，多谈点实际，少谈点主义，做只勤劳的小蜜蜂</p>

<p>rails的actionview提供了简单的select方法生产表单选择项，根据 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html">Api</a> 指示，用法如下：</p>

<p><code>ruby
select(object, method, choices, options = {}, html_options = {})
</code>
<!--more-->
- object是指select选项所修饰的目标对象，通常是一个Model对象
- method是目标对象的属性（方法）名
- choices可以是任何可枚举的对象，数组，Hash或者是包含了选择框的数据库查询结果
- options选项
- html_options是html相关选项</p>

<p>include_blank 会显示值为空的默认选项，prompt 会给个提示选择，比如提示 Select One. <br />
例如对于  @post.person_id =&gt; 2  </p>

<p>```
select(“post”, “person_id”, Person.all.collect {|p| [ p.name, p.id ] }, {:include_blank =&gt; ‘None’})</p>

<p><select name="post[person_id]">
  <option value="">None</option>
  <option value="1">David</option>
  <option value="2" selected="selected">Sam</option>
  <option value="3">Tobias</option>
</select>
```</p>

<p>index =&gt; nil 不显示空选项或提示项，直接显示第一个值</p>

<p>```
select(“album[]”, “genre”, %w[rap rock country], {}, { :index =&gt; nil })</p>

<p><select name="album[][genre]" id="album__genre">
  <option value="rap">rap</option>
  <option value="rock">rock</option>
  <option value="country">country</option>
</select>
```</p>

<p>:disabled =&gt; value 设置一个单独的值或者Prco对象 html标签属性为disable</p>

<p>```
select(“post”, “category”, Post::CATEGORIES, {:disabled =&gt; ‘restricted’})</p>

<p><select name="post[category]">
  <option />
  <option>joke</option>
  <option>poem</option>
  <option disabled="disabled">restricted</option>
</select>
```</p>

<p>当用到collection_select时，可以鉴定一个Proc对象是否disable</p>

<p>```
collection_select(:post, :category_id, Category.all, :id, :name, {:disabled =&gt; lambda{|category| category.archived? }})</p>

<p><select name="post[category_id]">
  <option value="1" disabled="disabled">2008 stuff</option>
  <option value="2" disabled="disabled">Christmas</option>
  <option value="3">Jokes</option>
  <option value="4">Poems</option>
</select>
```</p>

<p>html_option 里面还可以写各种js事件，比如这样</p>

<p><code>
select(:person, :id, Persion.all, {:onchange =&gt; 'doSomething()'})
</code></p>

<h5 id="selecttaghttpapirubyonrailsorgclassesactionviewhelpersformtaghelperhtmlmethod-i-selecttag"><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-select_tag">select_tag</a></h5>

<p><code>
select_tag(name, option_tags = nil, options = {})
</code></p>

<p>option =&gt; {:multiple, :disable, :include_blank, :prompt} 
后三个和select里面用法一样，mutiple 允许同时传递多个值，相当于一个多选框</p>

<p>option_tags 可以自己手写几个option标签，或者用现成的方法，其实就是option标签的helper方法，Api 中的几个 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select">例子</a></p>

<p>```
options_for_select(container, selected = nil)</p>

<p>options_from_collection_for_select(collection, value_method, text_method, selected = nil)
```</p>

<h5 id="collectionselecthttpapirubyonrailsorgclassesactionviewhelpersformoptionshelperhtmlmethod-i-collectionselect"><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select">collection_select</a></h5>

<p><code>
collection_select(object, method, collection, value_method, text_method, options = {}, html_options = {})
</code></p>

<p>collect_select 比 select 多了2个选项，value_method 和 text_method 分别表示 collection 你想选择的对应字段，相当于 select + options_from_collection_for_select 的组合，大致功能其实和 select 差不多</p>

<p>一篇老外5年前写的介绍这几个 select 的 <a href="http://shiningthrough.co.uk/Select-helper-methods-in-Ruby-on-Rails">文章</a>，rails 的中文文档还是太少了。</p>

<p>剩下几个出场率太低的helper</p>

<p>```
grouped_collection_select(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})</p>

<p>grouped_options_for_select(grouped_options, selected_key = nil, prompt = nil)</p>

<p>option_groups_from_collection_for_select(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)
```</p>

<ul>
  <li>grouped_collection_select用法和 collection_select 差不多，只是会生成 optgroup 标签来标识二级选项</li>
  <li>grouped_options_for_select 也是一样，比 options_for_select 多一层 optgroup 标签</li>
  <li>option_groups_from_collection_for_select 同options_from_collection_for_select，都只是在原有基础上修改了下</li>
</ul>

<p>Rails 源码在此，有兴趣的可以拜读下 <a href="https://github.com/rails/rails/blob/27c8debdc6b242c845a279187205a2b057e18469/actionpack/lib/action_view/helpers/form_options_helper.rb#L156">Here</a></p>

<p>用 select 的好处就是书写简洁，可以配合js生产联动查询，比如说最常用的省市查询 <br />
不过对于不熟悉语法的人可能读起来就不如直接 select &gt; option 直接明了，需要花时间去明白什么意思，各有利弊吧</p>
]]></content>
  </entry>
  
</feed>
